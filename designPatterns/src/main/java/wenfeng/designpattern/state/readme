状态模式：
    允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类，(State Pattern)是设计模式的一种，属于行为模式。

    1 上下文环境（Context）：它定义了客户程序需要的接口并维护一个具体状态角色的实例，将与状态相关的操作委托给当前的Concrete State对象来处理。

    2 抽象状态（State）：定义一个接口以封装使用上下文环境的的一个特定状态相关的行为。

    3 具体状态（Concrete State）：实现抽象状态定义的接口。

类似工作流转的意思：
    A状态操作完了之后去B状态
    案例： 提交请假申请，然后到部门领导审批，然后同意之后到hr审批 最后才成功 （状态变化）
    输出结果：
        提交流程，内容为： xxx申请请假。。。
        当前状态为： 已提交
        部门领导人审批流程。。。
        当前状态为： 部门已审批
        hr审批流程。。。
        当前状态为： hr已审批
        审批流程结束

缺点：
    类的耦合度比较高，基本上三个类要同时去写，而且会创建很多的节点类